import { ExcelService } from '../excel/excel.service';
import { PdfService } from '../pdf/pdf.service';
import * as i0 from "@angular/core";
export declare class globalSharedService {
    private excelService;
    private pdfService;
    name: any;
    selectedId: any;
    listOfRow: any;
    pageName: string;
    userDetails: any;
    tabClick: any;
    urlName: any;
    listOfModulesforServices: any;
    parentName: any;
    analogAssetObj: any;
    assetViewModeFormViewStatus: string;
    result: string;
    isadmin: boolean;
    landingMenuUrlForHome: any;
    maxUser: any;
    roleList: any[];
    assetDetails: any;
    globalId: any;
    notificationMediaList: any[];
    confirmedNotificationGroupList: any[];
    usersList: any[];
    notificationGroupDetails: any;
    notificationMediaTabDetails: any;
    notificationGroupmediaDetails: any;
    backId: string;
    dataDataSource: any;
    onpageloadNotificationGroupMediaDetails: any;
    confirmedAccessGroupList: any;
    id: number;
    reminingUser: number;
    maxUsers: number;
    dataServerTime: any;
    emailId: string;
    dropDownTextSettings: {
        text: string;
        noDataLabel: string;
    };
    setassetViewModeFormViewStatus(view: any): void;
    constructor(excelService: ExcelService, pdfService: PdfService);
    GettingId(id: any): void;
    GettingString(name: any): void;
    setId(id: any): void;
    gettingName(name: any): void;
    setOrganizationDetail(pageName: any, objectDetail: any): void;
    setMenuDetail(menu: any): void;
    analogAsset(objectDetail: any): void;
    listOfRowDetailForUser(url: any, objectDetail: any, tab: any, header: any): void;
    clearInfo(): void;
    getNamePattern(): string;
    getNamePatternForGatewayandAsset(): string;
    setIsAdmin(isAdmin: boolean): void;
    doubleHyphen(event: any): boolean;
    responseStatus: number;
    messageType_Fail: string;
    messageType_Info: string;
    messageType_Warning: string;
    messageType_Error: string;
    messageType_AlarmMessage: string;
    messageType_ClearMessage: string;
    landingMenuUrl(landingMenuUrl: any): void;
    setNumberOfUsers(numberOfUsers: any): void;
    setRoleList(confirmedList: any[]): void;
    setAssetDetail(details: any): void;
    setGlobalId(id: any): void;
    setNotificationMedia(objectDetail: any): void;
    setConfirmedNotificationGroupList(objectDetail: any): void;
    setConfirmedAccessGroupList(objectDetail: any): void;
    setUsersList(objectDetail: any): void;
    setNotificationGroupDetails(objectDetail: any): void;
    setNotificationMediaTabDetails(objectDetail: any): void;
    setNotificationGroupmediaDetails(objectDetail: any): void;
    setBackId(object: any): void;
    dataSource(dataSource: any): void;
    setNotificationDetail(obj: any): void;
    selectedDashboardName: any[];
    getDashboardSelectedName(userDashboardList: any, id: any): string;
    getPatternForCommunication(dataType: any): any;
    getPatternForDiscreterTag(dataType: any): any;
    setLanguageURL(pageUrl: any): void;
    getCurrentUrl(): string;
    setReminingUsers(reminingUsers: number): void;
    setMaxUsers(maxUsers: number): void;
    setDataServerTime(dataServerTime: any): void;
    fileName: string;
    getExportingFileName(exportingfileName: any): string;
    startDateEndDateTimeSplit(dateTime: any): string;
    reCreateNewObject(data: any, displayedColumns: any): any;
    formateCSVTitle(titleList: any, headerName: any): string;
    downloadFile(fileType: any, exportFile: any, searchFieldsContainer: any, tableBodyDataList: any, fileName: any, csvOptions: any): void;
    removeLastIndexAtArray(object: any): unknown[];
    serialNumberGenerate(array: any): any;
    setUserEmailId(emailId: string): void;
    selectedLanguage: string;
    getLanguage(): string;
    setLanguage(language: any): void;
    setMultiselectDropdownTextSettings(): {
        text: string;
        noDataLabel: string;
    };
    setGatewayLableName(path: any): "Gateway Template" | "Gateway";
    setData: any[];
    setDataValue(data: any): void;
    getDataValue(): any[];
    static ɵfac: i0.ɵɵFactoryDef<globalSharedService>;
    static ɵprov: i0.ɵɵInjectableDef<globalSharedService>;
}
